<!doctype html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>채팅 (WebSocket)</title>
    <style>
        body { margin: 20px; font-family: Arial, sans-serif; }
        nav ul { list-style: none; padding: 0; display: flex; gap: 10px; }
        nav a { padding: 8px 15px; background: #666; color: white; text-decoration: none; }

        .chat-area {
            border: 1px solid #ccc;
            height: 300px;
            padding: 10px;
            overflow-y: scroll;
            background: #f9f9f9;
        }

        .message {
            padding: 5px 10px;
            margin: 3px 0;
            background: white;
            border-radius: 8px;
            max-width: 80%;
        }

        .message:nth-child(odd) {
            background: #e1f5fe;
            margin-left: 20%;
        }

        /* 연결 상태 표시용 스타일 */
        .status {
            padding: 5px 10px;
            border-radius: 3px;
            font-size: 12px;
            margin-bottom: 10px;
        }
        .connected { background: #d4edda; color: #155724; }
        .disconnected { background: #f8d7da; color: #721c24; }

        /* 메시지 입력 폼 스타일 */
        .message-form {
            margin-top: 15px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background: #f8f9fa;
        }

        .message-form input {
            padding: 8px;
            width: 70%;
            margin-right: 10px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

        .message-form button {
            padding: 8px 15px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        .message-form button:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
<nav>
    <ul>
        <li><a href="/">목록</a></li>
        <li><a href="/save-form">작성</a></li>
    </ul>
</nav>

<h3>채팅 (WebSocket 방식)</h3>
<p style="color: #666; font-size: 13px;">실시간 업데이트</p>

<!-- 연결 상태 표시 영역 -->
<div id="status" class="status disconnected">연결 중...</div>

<!-- 채팅 메시지 표시 영역 -->
<div class="chat-area" id="chatArea">
    {{#models}}
        <div class="message">{{msg}}</div>
    {{/models}}
</div>

<!-- 메시지 입력 폼 -->
<div class="message-form">
    <form id="chatForm">
        <input type="text" id="msgInput" placeholder="메시지를 입력하세요..." required>
        <button type="submit" id="sendButton" disabled>연결 중...</button>
    </form>
</div>


<!-- STOMP 라이브러리 로드 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.6.1/sockjs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>

<script>
    <!--  이 페이지에 전역 변수 선언    -->
    // DOM 요소 참조
    const chatArea = document.getElementById('chatArea');
    const status = document.getElementById('status');
    const msgInput = document.getElementById('msgInput');
    const chatForm = document.getElementById('chatForm');
    const sendButton = document.getElementById('sendButton');

    <!--  이 페이지에 전역 변수 선언    -->
    let stompClient = null;

<!--    스톰프 연결 시작 -->
    function connect() {
        const socket = new SockJS('/ws');
        stompClient = Stomp.over(socket);

        // 스톰프 연결 시도
        stompClient.connect({}, onConnected, onError);
    }

<!--    연결 요청 함수 실행-->
    connect();

<!--    연결 성공 콜백 메서드 선언-->
    function onConnected() {
        status.textContent = "실시간 연결됨(STOMP)";
        status.className = 'status connected';
        sendButton.disabled = false;
        sendButton.textContent = '전송';
        msgInput.focus();
       console.log('11111111111');
        // 메시지 채널 구독 설정
        stompClient.subscribe('/topic/message', onMessageReceived);

        console.log('STOMP 연결 및 구독 처리 완료');
    }
<!--    연결 실패시 콜백 -->
    function onError(error) {
        status.textContent = "연결 에러 발생";
        status.className = 'status disconnected';
        sendButton.disabled = true;
        console.error('STOMP 연결 에러', error);
    }
<!-- 메세지 수신 처리 -->
    function onMessageReceived(message) {
      console.log('message', message);
      const chatMessage = message.body;
      // 에러 메세지 처리
      if(chatMessage.startsWith('ERROR:')) {
        // HTML 조작 ... 생략...
        console.error('ERROR 발생');
        return;
      }

      // 일반 채팅 메세지 정상 수신
      const messageDiv = document.createElement('div');
      messageDiv.className = 'message';
      messageDiv.textContent = chatMessage;
      chatArea.appendChild(messageDiv);

      // 스크롤 맨 아래로 이동 처리
      chatArea.scrollTop = chatArea.scrollHeight;
    }

<!--        메세지 전송 로직 처리-->
    chatForm.addEventListener('submit', function(e) {
        e.preventDefault();
        sendMessage();
    });

<!--    메세지 전송 로직 처리 -->
    function sendMessage() {
        // 사용자가 작성한 글자 가져오기
        const sendMessage = msgInput.value.trim();
        // 가져온 글자를 서버로 보내는 처리 - (검증...방어적 코드 작성)
        if(sendMessage != null && stompClient != null && stompClient.connected) {
        // {'content-Type': 'application/json'} <-- 헤더 설정
            stompClient.send('/app/chat', {}, sendMessage);

            msgInput.value = '';
            msgInput.focus();
        } else {
            alert('Stomp 연결이 끊어져 있습니다');
        }
    }

<!--     엔터키 이벤트 등록 및 처리   -->
        msgInput.addEventListener('keypress', function(e) {
            if(e.key === 'Enter') {
                sendMessage();
            }
        });

        // 페이지 종료 시 연결 종료 처리
        window.addEventListener('beforeunload', () => {
            if(stompClient) {
                stompClient.disconnect();
                console.log('stomp연결 정리 완료');
            }
        });


</script>


</body>
</html>